// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  organizations Organization[] @relation("OrganizationMembers")
  ownedOrganizations Organization[] @relation("OrganizationOwner")
  boards       Board[] @relation("BoardOwner")
  assignedCards Card[] @relation("CardAssignees")
  comments     Comment[] @relation("CommentAuthor")
  activities   Activity[] @relation("ActivityUser")
  createdAt    DateTime @default(now())
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  owner     User     @relation("OrganizationOwner", fields: [ownerId], references: [id])
  ownerId   String
  boards    Board[]
  members   User[]   @relation("OrganizationMembers")
  createdAt DateTime @default(now())
}

model Board {
  id            String   @id @default(uuid())
  name          String
  organizationId String
  organization  Organization @relation(fields: [organizationId], references: [id])
  owner         User        @relation("BoardOwner", fields: [ownerId], references: [id])
  ownerId       String
  lists         List[]
  createdAt     DateTime @default(now())
}

model List {
  id        String   @id @default(uuid())
  name      String
  board     Board    @relation(fields: [boardId], references: [id])
  boardId   String
  position  Float
  cards     Card[]
  createdAt DateTime @default(now())
}

model Card {
  id        String   @id @default(uuid())
  title     String
  description String?
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  position  Float
  labels    Label[]
  assignees User[]   @relation("CardAssignees")
  dueDate   DateTime?
  comments  Comment[]
  activities Activity[]
  createdAt DateTime @default(now())
}

model Label {
  id        String   @id @default(uuid())
  name      String
  color     String
  cards     Card[]
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  author    User     @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
}

model Activity {
  id        String   @id @default(uuid())
  action    String
  card      Card     @relation(fields: [cardId], references: [id])
  cardId    String
  user      User     @relation("ActivityUser", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
